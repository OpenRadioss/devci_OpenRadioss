name: Delivery HMReader in OpenRadioss

# This CI is triggerd by Gitlab Radioss CI to get libhmreader from Jfrog and push it into OpenRadioss

on:

  workflow_dispatch:
    inputs:
      deliv_commit:
        description: 'The commit related to the hmreader libraries we want to deliver'
        required: true

env:
  # CLOSE_BRANCH: 0
  # TEAM_RESTRICTIVE_CLOSED_BRANCH: ${{ secrets.TEAM_RESTRICTIVE_CLOSED_BRANCH }}
  DELIV_COMMIT: ${{ github.event.inputs.deliv_commit }}
  FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
  TO_EMAIL: ${{ secrets.TO_EMAIL }}
  MAIL_RELAY: ${{ secrets.MAIL_RELAY }}
  # QA_TIMEOUT_PER_TEST_LINUX: 150
  # QA_TIMEOUT_PER_TEST_WIN: 500
  # LAST_STABLE_TAG_NAME: ${{ github.event.inputs.tag_name }}
  CI: 'true'  # if true, disables interactive prompts and progress bar  
  # JFROG_CLI_LOG_LEVEL: "ERROR"
  JFROG_CLI_AVOID_NEW_VERSION_WARNING: "true"
  JF_OPTIONS: "--url=${{ secrets.JFROG_DELIVERY_URL }} --user=${{ secrets.JFROG_DELIVERY_USER }} --password=${{ secrets.JFROG_DELIVERY_TOKEN }}"
  MAIL_CONFIG_FILE: "/etc/mail.rc"
  MAIL_COMMAND: "Mail"

jobs:

  deliver_hmreader_openradioss:
    if: ${{ github.repository_owner == 'OpenRadioss' }}
    # DEV ONLY # runs-on: ["delivery","prod"] 
    # runs-on: ["delivery","prod"]
    runs-on: ["dev_delivery","dev"]
    container: 
      # image: fr-qafactorydev.europe.altair.com/common-linux64
      image: fr-qafactorydev.europe.altair.com/common-linux64
      credentials: 
        username: ${{secrets.DOCKER_REGISTRY_USER}}
        password: ${{secrets.DOCKER_REGISTRY_PASSWD}}
      volumes: 
        - /etc/localtime:/etc/localtime:ro
 
    env:
      HW_SOLVER_PREFIX: "hwsolvers/radioss"
      HMREADER_PREFIX: "hm_reader"
      # Needed by gh auth
      GIT_PUSH_SERVBOT_PAT: ${{ secrets.GIT_PUSH_SERVBOT_PAT }}
      GO_PUSH: 0
      GIT_SERVBOT_USER: ${{ secrets.GIT_SERVBOT_USER }}   
      GIT_SERVBOT_EMAIL: ${{ secrets.GIT_SERVBOT_EMAIL }}   
      STATUS_STEP_CHECK_DELIV_COMMIT: 0
      MSG_STEP_CHECK_DELIV_COMMIT: "Some libraries are missing on Jfrog"  
      STATUS_STEP_CHECK_LIBS: 0
      MSG_STEP_CHECK_LIBS: "Some libraries are missing on Jfrog"  
      STATUS_STEP_GET_LIBS: 0
      MSG_STEP_GET_LIBS: "Could not get libraries from Jfrog"  
      STATUS_STEP_PUSH_OR: 0
      MSG_STEP_PUSH_OR: "Could not push libraries on OpenRadioss repository"  
      HMREADER_OPENSOURCE_LOCAL_DIR: "extlib/hm_reader"

    # outputs:
    #   deliv_status: ${{ steps.set-status.outputs.DELIVERY_STATUS }}

    steps:

      # Set the working dir suffixed with deliv_hmreader
      - name: Set workdir and status
        run: |
          echo "WORKDIR=deliv_hmreader" >> $GITHUB_ENV
          echo "DELIVERY_STATUS=0" >> $GITHUB_ENV

      - name: Create specific deliv hmreader oriented WS directory
        run: |
          mkdir -p ${{ env.WORKDIR }}

      - name: Checking delivery commit
        working-directory: ${{ env.WORKDIR }}
        run: |
          # Get branch
          export BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          # DEV ONLY #
          export BRANCH_NAME="dev/ci/hm_reader_intermediate"

          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV

          export HM_REMOTE_DIR="${HW_SOLVER_PREFIX}/${HMREADER_PREFIX}/${BRANCH_NAME}/${DELIV_COMMIT}"
          echo "HM_REMOTE_DIR=${HM_REMOTE_DIR}" >> $GITHUB_ENV
          # Check if the commit exist on jfrog
          result_hm=$(jf rt s ${JF_OPTIONS} "${HM_REMOTE_DIR}/*")

          if [[ "${result_hm}" == "[]" ]]
          then
            echo "Commit ${DELIV_COMMIT} does not exist on Jfrog."
            exit 1
          fi

          # Set correct end of step status (if not an email will be sent)
          echo "STATUS_STEP_CHECK_DELIV_COMMIT=1" >> $GITHUB_ENV          

      - name: Check all libs are present
        run: |     
          echo "-------------------------"
          echo "Verify libraries on jfrog"
          echo "-------------------------"

          patterns=(
            "linux64/libhm_reader_linux64.so"
            "linuxa64/libhm_reader_linuxa64.so"
            "win64/hm_reader_win64.lib"
            "win64/hm_reader_win64.dll"
          )

          result_array=$(jf rt search ${JF_OPTIONS} ${{ env.HM_REMOTE_DIR }}/* | grep '"path":' | sed 's/.*"path": "//' | sed 's/",//')

          all_found=true
          not_found_libs=''

          # Loop through each pattern
          for pattern in "${patterns[@]}"; do
              # Check if the pattern is present in any line
              found=false
              for line in "${result_array[@]}"; do
                  if echo "$line" | grep -q "$pattern"; then
                      found=true
                      break
                  fi
              done

              # If the pattern was not found in any line, mark as not all found
              if ! $found; then
                  # echo "Pattern '$pattern' not found in any line."
                  not_found_libs+="\n${pattern}"
                  all_found=false
              # else
              #     echo "Pattern '$pattern' found."
              fi
          done

          # Final result check
          if $all_found; then
              echo -e "\nAll librarie have been found!"
              # Set correct end of step status (if not an email will be sent)
              echo "STATUS_STEP_CHECK_LIBS=1" >> $GITHUB_ENV
          else
              echo -e "\nSome librariy pattern has not been found:\n${not_found_libs}"
              exit 1
          fi

      # Get last git modifications
      - name: Checkout git sources
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKDIR }}
          clean: 'true'
          lfs: 'true'
          ref: 'main'
          # Use a PAT else the push won't trigger the next workflow
          token: ${{ env.GIT_PUSH_SERVBOT_PAT }}          

      - name: Get hm reader and d2r libs locally
        working-directory: ${{ env.WORKDIR }}
        run: |
          echo "--------------"
          echo "Getting HM Reader files"
          echo "----------"

          md5sum ${HMREADER_OPENSOURCE_LOCAL_DIR}/*/*

          # Opensource libs
          jf rt download ${JF_OPTIONS} --flat=true --recursive --exclusions="*/_com/*" "${{ env.HM_REMOTE_DIR }}/(*)" ${HMREADER_OPENSOURCE_LOCAL_DIR}/{1}

          # Add new files
          git add .
          git status

          md5sum ${HMREADER_OPENSOURCE_LOCAL_DIR}/*/*

      # - name: Set github access credentials
      #   working-directory: ${{ env.WORKDIR }}
      #   run: |    
      #     git config --global user.email "${{ env.GIT_SERVBOT_EMAIL }}"
      #     git config --global user.name "${{ env.GIT_SERVBOT_USER }}"

      #     git rm toto
      #     git commit -m "Remove toto"
      #     echo "GO_PUSH=1" >> $GITHUB_ENV

      # - name: Push changes
      #   uses: ad-m/github-push-action@master
      #   if: ${{ env.GO_PUSH == 1 }} 
      #   with:
      #     github_token: ${{ env.GIT_PUSH_SERVBOT_PAT }}
      #     branch: ${{ github.ref }}     
      #     directory: ${{ env.WORKDIR }}    

      # - name: Set push statys
      #   working-directory: ${{ env.WORKDIR }}
      #   run: |    
      #     # Set correct end of step status (if not an email will be sent)
      #     echo "STATUS_STEP_PUSH_OR=1" >> $GITHUB_ENV



      # - name: Push on Radioss
      #   run: |
        #   git add .
        #   git commit -m "Update libhm_reader library for Radioss"

        #   # Use adapted token with correct permission to push
        #   NEW_URL=$(echo "$CI_REPOSITORY_URL" | sed -e "s?${CI_JOB_TOKEN}?${GITLAB_TOKEN}?")
        #   # Recreate origin repo with related token (we can't use the current one to push)
        #   git remote remove origin
        #   git remote add origin $NEW_URL      
        #   git push origin ${CI_COMMIT_BRANCH}


      - name: Managing step execution
        if: ${{ always() }}
        run: |

          MAILMSG="The delivery of hm reader libraries into OpenRadioss repository fails.\n\nFind detail in log page ${LOG_PATH}\n\n"
          CONTINUE=1

          echo -e "\n#### STATUS_STEP_CHECK_DELIV_COMMIT ###"
          if [ "$STATUS_STEP_CHECK_DELIV_COMMIT" = 0 ]
          then
            echo -e "Status\t[ \033[31;2;1mFAILED\033[0m ]" 
            MAILMSG+="$MSG_STEP_CHECK_DELIV_COMMIT\n"
            CONTINUE=0
          else
            echo -e "Status\t[ \033[32;2;1mOK\033[0m ]"
          fi

          if [ "$CONTINUE" = 1 ]
          then          
            echo -e "\n#### STATUS_STEP_CHECK_LIBS ###"
            if [ "$STATUS_STEP_CHECK_LIBS" = 0 ]
            then
              echo -e "Status\t[ \033[31;2;1mFAILED\033[0m ]" 
              MAILMSG+="$MSG_STEP_CHECK_LIBS\n"
              CONTINUE=0
            else
              echo -e "Status\t[ \033[32;2;1mOK\033[0m ]"
            fi
          fi

          if [ "$CONTINUE" = 1 ]
          then          
            echo -e "\n#### STATUS_STEP_GET_LIBS ###"
            if [ "$STATUS_STEP_GET_LIBS" = 0 ]
            then
              echo -e "Status\t[ \033[31;2;1mFAILED\033[0m ]" 
              MAILMSG+="$MSG_STEP_GET_LIBS\n"
              CONTINUE=0
            else
              echo -e "Status\t[ \033[32;2;1mOK\033[0m ]"
            fi
          fi

          if [ "$CONTINUE" = 1 ]
          then          
            echo -e "\n#### STATUS_STEP_PUSH_OR ###"
            if [ "$STATUS_STEP_PUSH_OR" = 0 ]
            then
              echo -e "Status\t[ \033[31;2;1mFAILED\033[0m ]" 
              MAILMSG+="$MSG_STEP_PUSH_OR\n"
              CONTINUE=0
            else
              echo -e "Status\t[ \033[32;2;1mOK\033[0m ]"
            fi
          fi          

          # Send email 
          if [ "$CONTINUE" = 0 ] 
          then
    
            # Setting SMTP server (docker host)
            DOCKER_HOST=`/sbin/ip route|awk '/default/ { print $3 }'`
            echo "set smtp=smtp://${DOCKER_HOST}:25" >> ${MAIL_CONFIG_FILE}

            # Print message in log 
            echo -e $MAILMSG

            # DEV ONLY #
            export HMREADER_TO_EMAIL="mquinzin@europe.altair.com"

            # Send email
            SUBJECT="[ HMREADER LIBS PUSH on OPENRADIOSS ] - Error in CI"
            LOG_PATH="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
            echo -e "${MAILMSG}" | ${MAIL_COMMAND} -r ${FROM_EMAIL} -s "${SUBJECT}" ${HMREADER_TO_EMAIL}

            # Exit fail to see it as a failure
            exit 1
          fi


      # - name: Set DELIVERY status if everything if OK
      #   run: |  
      #     echo "Everything OK"
      #     echo "DELIVERY_STATUS=1" >> $GITHUB_ENV

      # - name: Store DELIVERY status value for next job
      #   if: ${{ always() }}
      #   id: set-status
      #   run: |  
      #     echo "DELIVERY_STATUS=${{ env.DELIVERY_STATUS }}" >> $GITHUB_OUTPUT
  
  # check_deliver_hmreader_openradioss:
  #   if: ${{ always() && github.repository_owner == 'OpenRadioss'}}
  #   # DEV ONLY # runs-on: ["delivery","prod"] 
  #   # runs-on: ["delivery","prod"]
  #   needs: deliver_hmreader_openradioss
  #   runs-on: ["dev_delivery","dev"]
  #   container: 
  #     image: fr-qafactorydev.europe.altair.com/common-linux64
  #     credentials: 
  #       username: ${{secrets.DOCKER_REGISTRY_USER}}
  #       password: ${{secrets.DOCKER_REGISTRY_PASSWD}}
  #     volumes: 
  #       - /etc/localtime:/etc/localtime:ro
 
  #   steps:

  #     - name: Send email if status is 0 
  #       if: ${{ needs.deliver_hmreader_openradioss.outputs.deliv_status == '0' }}
  #       run: |
  #         # Setting SMTP server (docker host)
  #         DOCKER_HOST=`/sbin/ip route|awk '/default/ { print $3 }'`
  #         echo "set smtp=smtp://${DOCKER_HOST}:25" >> ${MAIL_CONFIG_FILE}

  #         # DEV ONLY #
  #         export HMREADER_TO_EMAIL="mquinzin@europe.altair.com"

  #         # Send email
  #         SUBJECT="[ HMREADER LIBS PUSH on OPENRADIOSS ]"
  #         LOG_PATH="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
  #         MAILMSG="The delivery of hm reader libraries into OpenRadioss repository fails.\n\nFind detail in log page ${LOG_PATH}"
  #         echo -e ${MAILMSG}
  #         echo -e "${MAILMSG}" | ${MAIL_COMMAND} -r ${FROM_EMAIL} -s "${SUBJECT}" ${HMREADER_TO_EMAIL}
        
