name: Delivery HMReader in OpenRadioss

# This CI is triggerd by Gitlab Radioss CI to get libhmreader from Jfrog and push it into OpenRadioss

on:

  workflow_dispatch:
    inputs:
      deliv_commit:
        description: 'The commit related to the hmreader libraries we want to deliver'
        required: true

env:
  # CLOSE_BRANCH: 0
  # TEAM_RESTRICTIVE_CLOSED_BRANCH: ${{ secrets.TEAM_RESTRICTIVE_CLOSED_BRANCH }}
  DELIV_COMMIT: ${{ github.event.inputs.deliv_commit }}
  FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
  TO_EMAIL: ${{ secrets.TO_EMAIL }}
  MAIL_RELAY: ${{ secrets.MAIL_RELAY }}
  # QA_TIMEOUT_PER_TEST_LINUX: 150
  # QA_TIMEOUT_PER_TEST_WIN: 500
  # LAST_STABLE_TAG_NAME: ${{ github.event.inputs.tag_name }}
  CI: 'true'  # if true, disables interactive prompts and progress bar  
  # JFROG_CLI_LOG_LEVEL: "ERROR"
  JFROG_CLI_AVOID_NEW_VERSION_WARNING: "true"
  JF_OPTIONS: "--url=${{ secrets.JFROG_DELIVERY_URL }} --user=${{ secrets.JFROG_DELIVERY_USER }} --password=${{ secrets.JFROG_DELIVERY_TOKEN }}"

jobs:

  deliver_hmreader_openradioss:
    if: ${{ github.repository_owner == 'OpenRadioss' }}
    # DEV ONLY # runs-on: ["delivery","prod"] 
    # runs-on: ["delivery","prod"]
    runs-on: ["dev_delivery","dev"]
    container: 
      image: fr-qafactorydev.europe.altair.com/common-linux64
      credentials: 
        username: ${{secrets.DOCKER_REGISTRY_USER}}
        password: ${{secrets.DOCKER_REGISTRY_PASSWD}}
      volumes: 
        - /etc/localtime:/etc/localtime:ro
 
    env:
      DELIVERY_STATUS: 0
      HW_SOLVER_PREFIX: "hwsolvers/radioss"
      HMREADER_PREFIX: "hm_reader"

    steps:

      # Set the working dir suffixed with deliv_hmreader
      - name: Set workdir 
        run: |
          echo "WORKDIR=deliv_hmreader" >> $GITHUB_ENV

      - name: Create specific deliv hmreader oriented WS directory
        run: |
          mkdir -p ${{ env.WORKDIR }}

      - name: Checking variable
        working-directory: ${{ env.WORKDIR }}
        run: |
          # Get branch
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

          # DEV ONLY #
          echo "BRANCH_NAME=dev/ci/hm_reader_intermediate" >> $GITHUB_ENV

          echo "HM_REMOTE_DIR=${HW_SOLVER_PREFIX}/${HMREADER_PREFIX}/${{ env.BRANCH_NAME }}/${DELIV_COMMIT}" >> $GITHUB_ENV
          echo "ENV REMOTE_DIR : ${{ env.HM_REMOTE_DIR }}"
          # # Check if the commit exist on jfrog
          # result_hm=$(jf rt s ${JF_OPTIONS} "${{ env.HM_REMOTE_DIR }}/*")

          # if [[ "${result_hm}" == "[]" ]]
          # then
          #   echo "Commit ${DELIV_COMMIT} does not exist on Jfrog."
          #   exit 1
          # fi

      - name: Check all libs are present
        run: |     
          echo "-------------------------"
          echo "Verify libraries on jfrog"
          echo "-------------------------"
          
          echo "ENV REMOTE_DIR : ${{ env.HM_REMOTE_DIR }}"
          exit1

          patterns=(
            "linux64/libhm_reader_linux64.so"
            "linuxa64/libhm_reader_linuxa64.soww"
            "win64/hm_reader_win64.lib"
            "win64/hm_reader_win64.dll"
          )

          # search_results_hm_reader=$(jf rt search ${JF_OPTIONS} ${{ env.HM_REMOTE_DIR }}/*)
          echo "search into ${{ env.HM_REMOTE_DIR }}/*"
          jf rt search ${JF_OPTIONS} ${{ env.HM_REMOTE_DIR }}/* | grep '"path":'
          echo "-----"
          exit 1
          result_array=$(jf rt search ${JF_OPTIONS} ${{ env.HM_REMOTE_DIR }}/* | grep '"path":' | sed 's/.*"path": "//' | sed 's/",//')

          all_found=true
          not_found_libs=''

          # Loop through each pattern
          for pattern in "${patterns[@]}"; do
              # Check if the pattern is present in any line
              found=false
              for line in "${result_array[@]}"; do
                  if echo "$line" | grep -q "$pattern"; then
                      found=true
                      break
                  fi
              done

              # If the pattern was not found in any line, mark as not all found
              if ! $found; then
                  # echo "Pattern '$pattern' not found in any line."
                  not_found_libs+="\n${pattern}"
                  all_found=false
              # else
              #     echo "Pattern '$pattern' found."
              fi
          done

          # Final result check
          if $all_found; then
              echo -e "\nAll librarie have been found!"
          else
              echo -e "\nSome librariy pattern has not been found:\n${not_found_libs}"
              exit 1
          fi

      # - name: Load last status of the branch
      #   run: |
        #     echo "--------------"
        #     echo "Checkout branch ${CI_COMMIT_BRANCH} last status"
        #     echo "----------"   
        #     git config --global user.email "${GITLAB_USER_EMAIL}"
        #     git config --global user.name "${GITLAB_USER_NAME}"  

        #     # Force local branch to point on same commit as remote branch, way to restore a correct env if old push failed before
        #     git fetch origin ${CI_COMMIT_BRANCH}
        #     git reset --hard origin/${CI_COMMIT_BRANCH}
        #     git branch --force ${CI_COMMIT_BRANCH} origin/${CI_COMMIT_BRANCH}      
        #     git checkout ${CI_COMMIT_BRANCH}
        #     # echo "-------checkout"
        #     # git branch && git log --pretty=oneline -n 5
        #     # echo "-------"


      # - name: Get hm reader and d2r libs locally
      #   run: |
        #   echo "--------------"
        #   echo "Getting HM Reader and D2R files"
        #   echo "----------"

        #   # Commercial libs
        #   for myarch in linux64 linuxa64 win64
        #   do
        #     jf rt download ${JF_OPTIONS} --flat=true ${{ env.HM_REMOTE_DIR }}/${myarch}_com/* ${HMREADER_COMMERCIAL_LOCAL_DIR}/${myarch}/
        #   done
        #   # # Opensource libs
        #   # jf rt download ${JF_OPTIONS} --flat=true --recursive --exclusions="*/_com/*" "${{ env.HM_REMOTE_DIR }}/(*)" ${HMREADER_OPENSOURCE_LOCAL_DIR}/{1}

        #   # D2R
        #   # Remove local files in case name has changed (version in name !)
        #   rm -rf ${D2R_LOCAL_DIR}/*
        #   jf rt download ${JF_OPTIONS} --flat=true --recursive --exclusions="*/libapr*" "${HW_SOLVER_PREFIX}/${D2R_PREFIX}/${{ env.BRANCH_NAME }}/${DELIV_COMMIT}/(*)" ${D2R_LOCAL_DIR}/{1}
        #   # Add files in case they are new (new name)

        #   # Add new files
        #   git add .

        #   git status
        #   # md5sum ${HMREADER_COMMERCIAL_LOCAL_DIR}/*/* ${HMREADER_OPENSOURCE_LOCAL_DIR}/*/* ${D2R_LOCAL_DIR}/*/*

      # - name: Push on Radioss
      #   run: |
        #   git add .
        #   git commit -m "Update libhm_reader library for Radioss"

        #   # Use adapted token with correct permission to push
        #   NEW_URL=$(echo "$CI_REPOSITORY_URL" | sed -e "s?${CI_JOB_TOKEN}?${GITLAB_TOKEN}?")
        #   # Recreate origin repo with related token (we can't use the current one to push)
        #   git remote remove origin
        #   git remote add origin $NEW_URL      
        #   git push origin ${CI_COMMIT_BRANCH}


      # - name: Set DELIVERY status if evertthing if OK
      #   run: |  
        #   echo "Everything OK"
        #   echo "DELIVERY_STATUS=1" >> deliv.env
  