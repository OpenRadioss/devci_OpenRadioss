name: PR Merge CI MAIN

on:

  push:
    branches:
      - main

env:
  CLOSE_BRANCH: 0
  TEAM_RESTRICTIVE_CLOSED_BRANCH: ${{ secrets.TEAM_RESTRICTIVE_CLOSED_BRANCH }}
  FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
  TO_EMAIL: ${{ secrets.TO_EMAIL }}
  MAIL_RELAY: ${{ secrets.MAIL_RELAY }}
  QA_TIMEOUT_PER_TEST: 150

jobs:

  build:
    if: ${{ github.repository_owner == 'OpenRadioss' }}
    # DEV ONLY # runs-on: ["${{ matrix.os }}","dev_pmci"]
    runs-on: ["${{ matrix.build }}","dev_pmci"]
    # runs-on: ["${{ matrix.build }}","prmerge_ci"]
 
    env:
      BUILD_NB_THREAD: 2
      STATUS_BUILD: 0
      SERVBOT_PAT: ${{ secrets.SERVBOT_PAT }}

    strategy:
      # If one job fails others are canceled
      fail-fast: true
      matrix:
        include:
          - build: starter_win64
            precision: dp
            os: win64
            binary: starter

          # - build: starter_win64_sp
          #   precision: sp
          #   os: win64
          #   binary: starter

          # - build: engine_win64_impi
          #   precision: dp
          #   os: win64
          #   binary: engine
          #   mpi: impi

          # - build: engine_win64_impi_sp
          #   precision: sp
          #   os: win64
          #   binary: engine
          #   mpi: impi

          # - build: engine_win64
          #   precision: dp
          #   os: win64
          #   binary: engine

          # - build: engine_win64_sp
          #   precision: sp
          #   os: win64
          #   binary: engine

    steps:

      # Set the working dir suffixed with branch name
      - uses: haya14busa/action-cond@v1
        id: set_workdir
        with:
          cond: ${{ github.base_ref == '' }}
          if_true: ${{github.ref_name}}
          if_false: ${{github.base_ref}}

      - name: Create branch oriented WS directory & integration WS (WIN64)
        run: |
          md -Force ${{ steps.set_workdir.outputs.value }}

      - name: Clean local exe dir
        working-directory: ${{ steps.set_workdir.outputs.value }}
        run: |
          if (test-path OpenRadioss/exec) {
            rm OpenRadioss/exec -r -force
          }

      # Working with Olivier's fork for the testing
      # Get last git modifications, don't clean before (way to keep persistent obj files)
      # - uses: actions/checkout@v2
      #   with:
      #     path: ${{ steps.set_workdir.outputs.value }}
      #     clean: 'false'
      #     lfs: 'true'

      # - name: Running builds
      #   working-directory: ${{ steps.set_workdir.outputs.value }}
      #   shell: cmd
      #   run: >
      #     call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64 vs2019 && C:\cygwin64\bin\bash --login -c "
      #     echo \"STATUS_BUILD=1\" >> $GITHUB_ENV;
      #     "

        # call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64 vs2019 && C:\cygwin64\bin\bash --login -i -c "
        # cd %cd:\=/%;
        # cd OpenRadioss;
        # pwd;
        # git pull;
        # mpi_opts='';
        # if [ ! -z ${{ matrix.mpi }} ]; then mpi_opts='-mpi=${{ matrix.mpi }}'; fi;
        # cmd=\"./build_script.sh -arch=${{ matrix.os }} -prec=${{ matrix.precision }} -nt=${{ env.BUILD_NB_THREAD }} $mpi_opts\";
        # echo \"=========================================\";
        # echo \"--  BUILD ${{ matrix.build }} --\";
        # echo \"--  $cmd --\";
        # echo \"=========================================\";        
        # mkdir exec;
        # cd ${{ matrix.binary }};
        # eval $cmd;
        # cd ..;
        # md5sum exec/* || exit 1;
        # echo \"STATUS_BUILD=145\" >> $GITHUB_ENV;
        # "

      - name: Managing step execution
        if: ${{ always() }}
        # Running cygwin from powershell or cmd => neither identation nor comment !
        shell: cmd
        run: >
          call C:\cygwin64\bin\bash --login -c "
          MAILMSG=\"Some error(s) has(ve) been raised during workflow execution:\n\n\";
          echo -e \"\n#### STATUS_STEP_BUILD ${{ matrix.build }} ###\";
          echo \"STATUS_BUILD : ${{ env.STATUS_BUILD }}\";
          if [ ${{ env.STATUS_BUILD }} = 0 ];
          then
          echo -e \"Status\t[ \033[31;2;1mFAILED\033[0m ]\";
          MAILMSG+=\"The build ${{ matrix.build }} has failed \n\";
          echo \"CLOSE_BRANCH=1\" >> $GITHUB_ENV;
          echo -e $MAILMSG;
          echo -e \"$MAILMSG\nThe branch is closed\" | Email -f $FROM_EMAIL -s \"Error in Github CI repo ${{ github.repository }} (${{github.sha}})\" -r $MAIL_RELAY $TO_EMAIL;
          exit 1;
          else
          echo -e \"Status\t[ \033[32;2;1mOK\033[0m ]\";
          fi;   
          "        